name: Update TREE.md

# Autorise le bot à pousser sur le dépôt
permissions:
  contents: write

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-tree:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate TREE.md (nested, pretty)
        run: |
          python3 - <<'PY'
          import os

          ROOT = os.getcwd()
          repo_name = os.path.basename(ROOT.rstrip(os.sep)) + "/"

          # Exclusions de base
          EXCLUDE_DIRS = {".git", ".github", "node_modules", "__pycache__", ".venv", ".idea"}
          EXCLUDE_FILES = {".DS_Store"}

          # Descriptions pour js/
          DESCRIPTIONS = {
            "app.js": "Point d’entrée: état global, initialisation UI, routing interne.",
            "data.js": "Données d’itinéraire (jours, activités) consommées par l’app.",
            "explorer-data.js": "Données du “Carnet de l’explorateur”.",
            "explorer-mode.js": "Logique du mode explorateur (interactions, progression).",
            "map.js": "Carte Leaflet: marqueurs, couches, polylignes, interactions.",
            "story-mode.js": "UI du mode story (narration, transitions).",
          }

          lines = []

          def listdir_sorted(path):
            try:
              entries = os.listdir(path)
            except FileNotFoundError:
              return [], []
            dirs = sorted([e for e in entries if os.path.isdir(os.path.join(path, e))])
            files = sorted([e for e in entries if os.path.isfile(os.path.join(path, e))])
            return dirs, files

          def build_tree(path, prefix=""):
            dirs, files = listdir_sorted(path)
            # Filtrages
            dirs = [d for d in dirs if d not in EXCLUDE_DIRS and not d.startswith(".")]
            files = [f for f in files if f not in EXCLUDE_FILES and not f.startswith(".")]

            entries = [(d, True) for d in dirs] + [(f, False) for f in files]
            for idx, (name, is_dir) in enumerate(entries):
              is_last = (idx == len(entries) - 1)
              connector = "└─ " if is_last else "├─ "
              if is_dir:
                lines.append(f"{prefix}{connector}{name}/")
                new_prefix = f"{prefix}{'   ' if is_last else '│  '}"
                build_tree(os.path.join(path, name), new_prefix)
              else:
                desc = ""
                if os.path.basename(path) == "js" and name in DESCRIPTIONS:
                  desc = f"  — {DESCRIPTIONS[name]}"
                lines.append(f"{prefix}{connector}{name}{desc}")

          # Génère l'arbo
          lines.append(f"{repo_name}")
          build_tree(ROOT)

          # Écrit le fichier
          with open("TREE.md", "w", encoding="utf-8") as f:
            f.write("```\n")
            for l in lines:
              f.write(l + "\n")
            f.write("```\n")
          PY

      - name: Commit and push if changed
        run: |
          if git diff --quiet -- TREE.md; then
            echo "No changes in TREE.md"
          else
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add TREE.md
            git commit -m "chore: auto-update TREE.md [skip ci]"
            git push
          fi