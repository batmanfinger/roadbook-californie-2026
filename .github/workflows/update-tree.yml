name: Update TREE.md

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-tree:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate TREE.md
        run: |
          REPO_NAME="$(basename "$GITHUB_REPOSITORY")"
          COMMIT_SHA="$(git rev-parse HEAD)"

          # En-tête
          {
            echo "# Arborescence du dépôt"
            echo
            echo "Source: Git commit ${COMMIT_SHA}"
            echo
            echo "${REPO_NAME}/"
          } > TREE.md

          # Fonction commentaire: ajoute une courte description pour certains fichiers clés.
          comment_for() {
            case "$1" in
              "California 2026.kml") echo "— Export KML (trajets/points) source pour itinéraires/POI." ;;
              "README.md") echo "— Présentation, installation, usage du projet." ;;
              "STORY_MODE.md") echo "— Spécifications et contenu du mode “story” (gamification)." ;;
              "css/style.css") echo "— Styles globaux (mobile-first, variables, BEM, thèmes)." ;;
              "js/app.js") echo "— Point d’entrée: état global, init UI, événements, navigation interne." ;;
              "js/data.js") echo "— Données d’itinéraire (jours, activités) consommées par l’app." ;;
              "js/explorer-data.js") echo "— Données du “Carnet de l’explorateur” (contenus, items)." ;;
              "js/explorer-mode.js") echo "— Logique du mode explorateur (interactions, progression)." ;;
              "js/map.js") echo "— Carte Leaflet: marqueurs, couches, polylignes, interactions." ;;
              "js/story-mode.js") echo "— UI du mode story (narration type stories, transitions)." ;;
              "kml-converter.html") echo "— Outil client pour prévisualiser/convertir le KML." ;;
              "manifest.json") echo "— Manifest PWA (nom, icônes, couleurs, scope)." ;;
              "parse_kml.py") echo "— Script Python: parse le KML pour générer des données JS." ;;
              "placeDetails_additions.txt") echo "— Backlog éditorial: ajouts à injecter dans placeDetails." ;;
              "placeDetails_manquants.js") echo "— Gabarits/manquants pour placeDetails (à compléter)." ;;
              "routes_polylines.js") echo "— Données polylignes (itinéraires) consommées par Leaflet." ;;
              "service-worker.js") echo "— Service Worker (cache offline, stratégie de maj)." ;;
              "images/README.md") echo "— Consignes images (crédits, formats)." ;;
              *) echo "" ;;
            esac
          }

          # Liste triée (on garde structure dossiers, on ignore .git)
          while IFS= read -r path; do
            # Indentation et présentation
            if [ -d "$path" ]; then
              printf "├─ %s/\n" "$path" >> TREE.md
            else
              # Ne pas mettre de commentaires pour les images (sauf images/README.md)
              if [[ "$path" == images/places/* ]]; then
                printf "│  %s %s\n" "├─" "$(basename "$path")" >> .tmp_images_list
              else
                cmt="$(comment_for "$path")"
                if [[ "$path" == images/* ]]; then
                  printf "├─ %s %s\n" "$path" "$cmt" >> TREE.md
                elif [[ "$path" == js/* ]]; then
                  printf "├─ %s %s\n" "$path" "$cmt" >> TREE.md
                else
                  printf "├─ %s %s\n" "$path" "$cmt" >> TREE.md
                fi
              fi
            fi
          done < <(git ls-tree -r --name-only HEAD | LC_ALL=C sort)

          # Bloc images/places (sans commentaires, listées sous le dossier)
          if [ -d "images/places" ]; then
            # S'assurer que l’en-tête dossiers images est présent
            grep -q "^├─ images/$" TREE.md || echo "├─ images/" >> TREE.md
            echo "│  └─ places/" >> TREE.md
            if [ -f .tmp_images_list ]; then
              sed 's/^/│     /' .tmp_images_list >> TREE.md
              rm -f .tmp_images_list
            fi
          fi

          # Nettoyage double-slashes éventuels (pas critique)
          sed -i 's/\/\//\//g' TREE.md

      - name: Commit and push TREE.md if changed
        run: |
          if ! git diff --quiet -- TREE.md; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add TREE.md
            git commit -m "chore: auto-update TREE.md [skip ci]"
            git push
          else
            echo "No changes in TREE.md"
          fi
